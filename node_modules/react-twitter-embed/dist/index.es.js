import _Object$assign from 'babel-runtime/core-js/object/assign';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import isRequiredIf from 'react-proptype-conditional-require';
import ExecutionEnvironment from 'exenv';

var twitter_widget_js = 'https://platform.twitter.com/widgets.js';

var TwitterTimelineEmbed = function (_Component) {
     _inherits(TwitterTimelineEmbed, _Component);

     function TwitterTimelineEmbed() {
          _classCallCheck(this, TwitterTimelineEmbed);

          return _possibleConstructorReturn(this, (TwitterTimelineEmbed.__proto__ || _Object$getPrototypeOf(TwitterTimelineEmbed)).apply(this, arguments));
     }

     _createClass(TwitterTimelineEmbed, [{
          key: 'buildChromeOptions',
          value: function buildChromeOptions(options) {
               options.chrome = '';
               if (this.props.noHeader) {
                    options.chrome = options.chrome + ' noheader';
               }

               if (this.props.noFooter) {
                    options.chrome = options.chrome + ' nofooter';
               }

               if (this.props.noBorders) {
                    options.chrome = options.chrome + ' noborders';
               }

               if (this.props.noScrollbar) {
                    options.chrome = options.chrome + ' noscrollbar';
               }

               if (this.props.transparent) {
                    options.chrome = options.chrome + ' transparent';
               }

               return options;
          }
     }, {
          key: 'buildOptions',
          value: function buildOptions() {
               var options = _Object$assign({}, this.props.options);
               if (this.props.autoHeight) {
                    options.height = this.refs.embedContainer.parentNode.offsetHeight;
               }

               options = _Object$assign({}, options, {
                    theme: this.props.theme,
                    linkColor: this.props.linkColor,
                    borderColor: this.props.borderColor,
                    lang: this.props.lang
               });

               return options;
          }
     }, {
          key: 'renderWidget',
          value: function renderWidget(options) {
               if (!this.isMountCanceled) {
                    window.twttr.widgets.createTimeline({
                         sourceType: this.props.sourceType,
                         screenName: this.props.screenName,
                         userId: this.props.userId,
                         ownerScreenName: this.props.ownerScreenName,
                         slug: this.props.slug,
                         id: this.props.id || this.props.widgetId,
                         url: this.props.url
                    }, this.refs.embedContainer, options);
               }
          }
     }, {
          key: 'componentDidMount',
          value: function componentDidMount() {
               var _this2 = this;

               if (ExecutionEnvironment.canUseDOM) {
                    var script = require('scriptjs');
                    script(twitter_widget_js, 'twitter-embed', function () {
                         if (!window.twttr) {
                              console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.');
                              return;
                         }

                         var options = _this2.buildOptions();
                         /** Append chrome options */
                         options = _this2.buildChromeOptions(options);
                         _this2.renderWidget(options);
                    });
               }
          }
     }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
               this.isMountCanceled = true;
          }
     }, {
          key: 'render',
          value: function render() {
               return React.createElement('div', { ref: 'embedContainer' });
          }
     }]);

     return TwitterTimelineEmbed;
}(Component);

TwitterTimelineEmbed.propTypes = {
     /**
          * This can be either of profile, likes, list, collection, URL, widget
          */
     sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'URL', 'widget']).isRequired,
     /**
          * username of twitter handle as String
          */
     screenName: isRequiredIf(PropTypes.string, function (props) {
          return !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes');
     }),
     /**
          * UserId of twitter handle as number
          */
     userId: isRequiredIf(PropTypes.number, function (props) {
          return !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes');
     }),
     /**
          * To show list, used along with slug
          */
     ownerScreenName: isRequiredIf(PropTypes.string, function (props) {
          return props.sourceType === 'list' && !props.hasOwnProperty('id');
     }),
     /**
          * To show list, used along with ownerScreenName
          */
     slug: isRequiredIf(PropTypes.string, function (props) {
          return props.sourceType === 'list' && !props.hasOwnProperty('id');
     }),
     /**
          * To show list, unique list id
          * Also used with collections, in that case its valid collection id
          */
     id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), function (props) {
          return props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug') || props.sourceType === 'collection';
     }),
     /**
          * To show twitter content with url.
          * Supported content includes profiles, likes, lists, and collections.
          */
     url: isRequiredIf(PropTypes.string, function (props) {
          return props.sourceType === 'url';
     }),
     /**
          * To show custom widget
          */
     widgetId: isRequiredIf(PropTypes.string, function (props) {
          return props.sourceType === 'widget';
     }),
     /**
          * Additional options to pass to twitter widget plugin
          */
     options: PropTypes.object,
     /**
          * Automatically fit into parent container height
          */
     autoHeight: PropTypes.bool,
     /**
          * With dark or light theme
          */
     theme: PropTypes.oneOf(['dark', 'light']),
     /**
          * With custom link colors. Note: Only Hex colors are supported.
          */
     linkColor: PropTypes.string,
     /**
          * With custom border colors. Note: Only Hex colors are supported.
          */
     borderColor: PropTypes.string,
     /**
          * Hide the header from timeline
          */
     noHeader: PropTypes.bool,
     /**
          * Hide the footer from timeline
          */
     noFooter: PropTypes.bool,
     /**
          * Hide the border from timeline
          */
     noBorders: PropTypes.bool,
     /**
          * Hide the scrollbars
          */
     noScrollbar: PropTypes.bool,
     /**
          * Enable Transparancy
          */
     transparent: PropTypes.bool,
     /**
          * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html
          */
     lang: PropTypes.string
};

var TwitterShareButton = function (_Component) {
  _inherits(TwitterShareButton, _Component);

  function TwitterShareButton() {
    _classCallCheck(this, TwitterShareButton);

    return _possibleConstructorReturn(this, (TwitterShareButton.__proto__ || _Object$getPrototypeOf(TwitterShareButton)).apply(this, arguments));
  }

  _createClass(TwitterShareButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterShareButton, aborting load.');
            return;
          }

          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createShareButton(_this2.props.url, _this2.refs.embedContainer, _this2.props.options);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterShareButton;
}(Component);

TwitterShareButton.propTypes = {
  /**
  * Url for sharing
  */
  url: PropTypes.string.isRequired,
  /**
  * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters
  */
  options: PropTypes.object
};

var TwitterFollowButton = function (_Component) {
  _inherits(TwitterFollowButton, _Component);

  function TwitterFollowButton() {
    _classCallCheck(this, TwitterFollowButton);

    return _possibleConstructorReturn(this, (TwitterFollowButton.__proto__ || _Object$getPrototypeOf(TwitterFollowButton)).apply(this, arguments));
  }

  _createClass(TwitterFollowButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.');
            return;
          }

          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createFollowButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterFollowButton;
}(Component);

TwitterFollowButton.propTypes = {
  /**
       * Username of twitter user which will be followed on click
       */
  screenName: PropTypes.string.isRequired,
  /**
       * Additional options to be added to the button
       */
  options: PropTypes.object
};

var TwitterHashtagButton = function (_Component) {
  _inherits(TwitterHashtagButton, _Component);

  function TwitterHashtagButton() {
    _classCallCheck(this, TwitterHashtagButton);

    return _possibleConstructorReturn(this, (TwitterHashtagButton.__proto__ || _Object$getPrototypeOf(TwitterHashtagButton)).apply(this, arguments));
  }

  _createClass(TwitterHashtagButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.');
            return;
          }

          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createHashtagButton(_this2.props.tag, _this2.refs.embedContainer, _this2.props.options);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterHashtagButton;
}(Component);

TwitterHashtagButton.propTypes = {
  /**
       * Tag name for hashtag button
       */
  tag: PropTypes.string.isRequired,
  /**
       * Additional options to be added to the button
       */
  options: PropTypes.object
};

var TwitterMentionButton = function (_Component) {
  _inherits(TwitterMentionButton, _Component);

  function TwitterMentionButton() {
    _classCallCheck(this, TwitterMentionButton);

    return _possibleConstructorReturn(this, (TwitterMentionButton.__proto__ || _Object$getPrototypeOf(TwitterMentionButton)).apply(this, arguments));
  }

  _createClass(TwitterMentionButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.');
            return;
          }

          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createMentionButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterMentionButton;
}(Component);

TwitterMentionButton.propTypes = {
  /**
   * Username to which you will need to tweet
   */
  screenName: PropTypes.string.isRequired,
  /**
   * Additional options for overriding config.
   */
  options: PropTypes.object
};

var TwitterTweetEmbed = function (_Component) {
  _inherits(TwitterTweetEmbed, _Component);

  function TwitterTweetEmbed() {
    _classCallCheck(this, TwitterTweetEmbed);

    return _possibleConstructorReturn(this, (TwitterTweetEmbed.__proto__ || _Object$getPrototypeOf(TwitterTweetEmbed)).apply(this, arguments));
  }

  _createClass(TwitterTweetEmbed, [{
    key: 'renderWidget',
    value: function renderWidget() {
      if (!window.twttr) {
        console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.');
        return;
      }
      if (!this.isMountCanceled) {
        window.twttr.widgets.createTweet(this.props.tweetId, this.refs.embedContainer, this.props.options);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          _this2.renderWidget();
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterTweetEmbed;
}(Component);

TwitterTweetEmbed.propTypes = {
  /**
       * Tweet id that needs to be shown
       */
  tweetId: PropTypes.string.isRequired,
  /**
       * Additional options to pass to twitter widget plugin
       */
  options: PropTypes.object
};

var TwitterMomentShare = function (_Component) {
  _inherits(TwitterMomentShare, _Component);

  function TwitterMomentShare() {
    _classCallCheck(this, TwitterMomentShare);

    return _possibleConstructorReturn(this, (TwitterMomentShare.__proto__ || _Object$getPrototypeOf(TwitterMomentShare)).apply(this, arguments));
  }

  _createClass(TwitterMomentShare, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.');
            return;
          }

          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createMoment(_this2.props.momentId, _this2.refs.shareMoment, _this2.props.options);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'shareMoment' });
    }
  }]);

  return TwitterMomentShare;
}(Component);

TwitterMomentShare.propTypes = {
  /**
   * id of Twitter moment to show
   */
  momentId: PropTypes.string.isRequired,
  /**
   * Additional options for overriding config.
   */
  options: PropTypes.object
};

var TwitterDMButton = function (_Component) {
  _inherits(TwitterDMButton, _Component);

  function TwitterDMButton() {
    _classCallCheck(this, TwitterDMButton);

    return _possibleConstructorReturn(this, (TwitterDMButton.__proto__ || _Object$getPrototypeOf(TwitterDMButton)).apply(this, arguments));
  }

  _createClass(TwitterDMButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterDMButton, aborting load.');
            return;
          }

          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createDMButton(_this2.props.id, _this2.refs.embedContainer, _this2.props.options);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterDMButton;
}(Component);

TwitterDMButton.propTypes = {
  /**
       * Twitter user id for DM button
       */
  id: PropTypes.number.isRequired,
  /**
       * Additional options to be added to the button
       */
  options: PropTypes.object
};

var TwitterVideoEmbed = function (_Component) {
  _inherits(TwitterVideoEmbed, _Component);

  function TwitterVideoEmbed() {
    _classCallCheck(this, TwitterVideoEmbed);

    return _possibleConstructorReturn(this, (TwitterVideoEmbed.__proto__ || _Object$getPrototypeOf(TwitterVideoEmbed)).apply(this, arguments));
  }

  _createClass(TwitterVideoEmbed, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.');
            return;
          }
          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createVideo(_this2.props.id, _this2.refs.embedContainer);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterVideoEmbed;
}(Component);

TwitterVideoEmbed.propTypes = {
  /**
       * Id of video tweet.
       */
  id: PropTypes.string.isRequired
};

var TwitterOnAirButton = function (_Component) {
  _inherits(TwitterOnAirButton, _Component);

  function TwitterOnAirButton() {
    _classCallCheck(this, TwitterOnAirButton);

    return _possibleConstructorReturn(this, (TwitterOnAirButton.__proto__ || _Object$getPrototypeOf(TwitterOnAirButton)).apply(this, arguments));
  }

  _createClass(TwitterOnAirButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (ExecutionEnvironment.canUseDOM) {
        var script = require('scriptjs');
        script(twitter_widget_js, 'twitter-embed', function () {
          if (!window.twttr) {
            console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.');
            return;
          }

          if (!_this2.isMountCanceled) {
            window.twttr.widgets.createPeriscopeOnAirButton(_this2.props.username, _this2.refs.embedContainer, _this2.props.options);
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.isMountCanceled = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { ref: 'embedContainer' });
    }
  }]);

  return TwitterOnAirButton;
}(Component);

TwitterOnAirButton.propTypes = {
  /**
   * Username for which you require periscope on air button
   */
  username: PropTypes.string.isRequired,
  /**
   * Additional options for overriding config.
   */
  options: PropTypes.object
};

export { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton };
//# sourceMappingURL=index.es.js.map
